
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD_END ADD_START AND_END AND_START ASSIGN_END ASSIGN_START BOOL CALL_END CALL_START CELL CHECK_END CHECK_START CONDITION_END CONDITION_START CONST COUNT DIMENSIONS_END DIMENSIONS_START DIMENSION_END DIMENSION_START DIM_END DIM_START DIV_END DIV_START DOWN_END DOWN_START DO_END DO_START EMPTY EQUALSIGN EQ_END EQ_START EXIT FALSE FUNC_END FUNC_START GETDRONSCOUNT_END GETDRONSCOUNT_START ID INDEX_END INDEX_START INT LBRACKET LEFT_END LEFT_START MAIN MAX_END MAX_START MIN_END MIN_START MUL_END MUL_START NAME NOT_END NOT_START NUMBER OR_END OR_START PROGRAM_END PROGRAM_START RBRACKET RIGHT_END RIGHT_START SENDDRONS_END SENDDRONS_START SUB_END SUB_START SWITCH_END SWITCH_START TO_END TO_START TRUE TYPE_END TYPE_START UNDEF UP_END UP_START VALUES_END VALUES_START VALUE_END VALUE_START VARDECLARATION_END VARDECLARATION_START VAR_END VAR_START WALL WHILE_END WHILE_STARTprogram : PROGRAM_START blocks PROGRAM_ENDblocks : blocks block\n\t\t| blockblock : vardeclaration\n\t\t| function\n\t\t| emptyvardeclaration : VARDECLARATION_START declarations VARDECLARATION_ENDdeclarations : declarations declaration\n\t\t| declarationdeclaration : declaration_var\n\t\t| declaration_var_init\n\t\t| declaration_var_const\n\t\t| declaration_array\n\t\t| declaration_array_init\n\t\t| declaration_array_const\n\t\t| emptydeclaration_var : VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END LBRACKET VAR_END\n\t\t| VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END LBRACKET VAR_ENDdeclaration_var_const : VAR_START EQUALSIGN id CONST EQUALSIGN TRUE RBRACKET TYPE_START type TYPE_END VALUE_START expression VALUE_END LBRACKET VAR_ENDdeclaration_var_init : VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END VALUE_START expression VALUE_END LBRACKET VAR_END\n\t\t| VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END VALUE_START expression VALUE_END LBRACKET VAR_ENDdeclaration_array : VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END LBRACKET VAR_END\n\t\t| VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END LBRACKET VAR_ENDdeclaration_array_init : VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END VALUES_START values VALUES_END LBRACKET VAR_END\n\t\t| VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END VALUES_START values VALUES_END LBRACKET VAR_ENDdeclaration_array_const : VAR_START EQUALSIGN id CONST EQUALSIGN TRUE RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END VALUES_START values VALUES_END LBRACKET VAR_ENDvalues : values value\n\t\t| valuevalue : VALUE_START expression VALUE_ENDdimensions : dimensions dimension\n\t\t| dimensiondimension : DIMENSION_START expression DIMENSION_ENDtype : INT\n\t\t| CELL\n\t\t| BOOLid : IDfunction : FUNC_START NAME EQUALSIGN funcname RBRACKET statements FUNC_ENDfuncname : ID\n\t\t| MAINstatements : statements statement\n\t\t| statementstatement : vardeclaration\n\t\t| switch\n\t\t| assignment \n\t\t| while\n\t\t| call\n\t\t| operator\n\t\t| emptyswitch : SWITCH_START conditions SWITCH_ENDassignment : ASSIGN_START VALUE_START expression VALUE_END TO_START variables TO_END ASSIGN_ENDwhile : WHILE_START CHECK_START expression CHECK_END DO_START statements DO_END WHILE_ENDconditions : conditions condition\n\t\t| conditioncondition : CONDITION_START CHECK_START expression CHECK_END DO_START statements DO_END CONDITION_END\n\t\t| emptycondition : errorcall : CALL_START funcname CALL_ENDvariables : variables variable\n\t\t| variablevariable : VAR_START NAME EQUALSIGN id VAR_END\n\t\t| VAR_START NAME EQUALSIGN id RBRACKET DIM_START indexes DIM_END LBRACKET VAR_END\n\t\t| emptyindexes : indexes index\n\t\t| indexindex : INDEX_START expression INDEX_ENDexpressions : expressions expression\n\t\t| expressionexpression : variable\n\t\t| senddrons \n\t\t| standart_function\n\t\t| const\n\t\t| emptyconst : NUMBER \n\t\t| TRUE\n\t\t| FALSE\n\t\t| EMPTY\n\t\t| WALL\n\t\t| EXIT\n\t\t| UNDEFstandart_function : ADD_START expressions ADD_END\n\t\t| MUL_START expressions MUL_END\n\t\t| SUB_START expressions SUB_END\n\t\t| DIV_START expressions DIV_END\n\t\t| OR_START expressions OR_END\n\t\t| AND_START expressions AND_END\n\t\t| MAX_START expressions MAX_END\n\t\t| MIN_START expressions MIN_END\n\t\t| EQ_START expressions EQ_END\n\t\t| NOT_START expression NOT_ENDoperator : LEFT_START expression LEFT_END\n\t\t| RIGHT_START expression RIGHT_END\n\t\t| UP_START expression UP_END\n\t\t| DOWN_START expression DOWN_END\n\t\t| GETDRONSCOUNT_START variable GETDRONSCOUNT_ENDsenddrons : SENDDRONS_START expression SENDDRONS_ENDempty : block : errorstatement : error'
    
_lr_action_items = {'PROGRAM_START':([0,],[2,]),'$end':([1,11,],[0,-1,]),'error':([2,3,4,5,6,7,8,12,24,35,38,39,40,41,42,43,44,45,46,47,48,63,64,65,66,68,69,106,107,111,112,126,127,128,129,158,164,167,177,190,191,202,],[8,8,-3,-4,-5,-6,-97,-2,-7,47,47,-41,-42,-43,-44,-45,-46,-47,-48,-98,69,-37,-40,69,-53,-55,-56,-49,-52,-57,-90,-91,-92,-93,-94,47,47,47,47,-50,-51,-54,]),'VARDECLARATION_START':([2,3,4,5,6,7,8,12,24,35,38,39,40,41,42,43,44,45,46,47,63,64,106,111,112,126,127,128,129,158,164,167,177,190,191,],[9,9,-3,-4,-5,-6,-97,-2,-7,9,9,-41,-42,-43,-44,-45,-46,-47,-48,-98,-37,-40,-49,-57,-90,-91,-92,-93,-94,9,9,9,9,-50,-51,]),'FUNC_START':([2,3,4,5,6,7,8,12,24,63,],[10,10,-3,-4,-5,-6,-97,-2,-7,-37,]),'PROGRAM_END':([2,3,4,5,6,7,8,12,24,63,],[-96,11,-3,-4,-5,-6,-97,-2,-7,-37,]),'VAR_START':([9,13,14,15,16,17,18,19,20,21,25,52,53,54,55,56,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,102,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,151,157,165,166,168,173,175,179,182,184,194,197,218,220,222,223,226,239,240,247,248,],[22,22,-9,-10,-11,-12,-13,-14,-15,-16,-8,79,79,79,79,79,79,79,-68,-69,-70,-71,-62,79,79,79,79,79,79,79,79,79,79,79,-73,-74,-75,-76,-77,-78,-79,-62,79,79,-67,79,79,79,79,79,79,79,79,79,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-17,79,79,-59,-60,79,79,-58,-20,-18,79,79,-21,-19,-61,-22,79,-24,-23,-25,-26,]),'VARDECLARATION_END':([9,13,14,15,16,17,18,19,20,21,25,151,182,184,218,220,223,239,240,247,248,],[-96,24,-9,-10,-11,-12,-13,-14,-15,-16,-8,-17,-20,-18,-21,-19,-22,-24,-23,-25,-26,]),'NAME':([10,79,],[23,113,]),'EQUALSIGN':([22,23,34,113,153,186,188,],[26,27,37,138,161,199,201,]),'FUNC_END':([24,35,38,39,40,41,42,43,44,45,46,47,64,106,111,112,126,127,128,129,190,191,],[-7,-96,63,-41,-42,-43,-44,-45,-46,-47,-48,-98,-40,-49,-57,-90,-91,-92,-93,-94,-50,-51,]),'SWITCH_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,106,111,112,126,127,128,129,158,164,167,177,190,191,],[-7,48,48,-41,-42,-43,-44,-45,-46,-47,-48,-98,-40,-49,-57,-90,-91,-92,-93,-94,48,48,48,48,-50,-51,]),'ASSIGN_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,106,111,112,126,127,128,129,158,164,167,177,190,191,],[-7,49,49,-41,-42,-43,-44,-45,-46,-47,-48,-98,-40,-49,-57,-90,-91,-92,-93,-94,49,49,49,49,-50,-51,]),'WHILE_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,106,111,112,126,127,128,129,158,164,167,177,190,191,],[-7,50,50,-41,-42,-43,-44,-45,-46,-47,-48,-98,-40,-49,-57,-90,-91,-92,-93,-94,50,50,50,50,-50,-51,]),'CALL_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,106,111,112,126,127,128,129,158,164,167,177,190,191,],[-7,51,51,-41,-42,-43,-44,-45,-46,-47,-48,-98,-40,-49,-57,-90,-91,-92,-93,-94,51,51,51,51,-50,-51,]),'LEFT_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,106,111,112,126,127,128,129,158,164,167,177,190,191,],[-7,52,52,-41,-42,-43,-44,-45,-46,-47,-48,-98,-40,-49,-57,-90,-91,-92,-93,-94,52,52,52,52,-50,-51,]),'RIGHT_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,106,111,112,126,127,128,129,158,164,167,177,190,191,],[-7,53,53,-41,-42,-43,-44,-45,-46,-47,-48,-98,-40,-49,-57,-90,-91,-92,-93,-94,53,53,53,53,-50,-51,]),'UP_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,106,111,112,126,127,128,129,158,164,167,177,190,191,],[-7,54,54,-41,-42,-43,-44,-45,-46,-47,-48,-98,-40,-49,-57,-90,-91,-92,-93,-94,54,54,54,54,-50,-51,]),'DOWN_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,106,111,112,126,127,128,129,158,164,167,177,190,191,],[-7,55,55,-41,-42,-43,-44,-45,-46,-47,-48,-98,-40,-49,-57,-90,-91,-92,-93,-94,55,55,55,55,-50,-51,]),'GETDRONSCOUNT_START':([24,35,38,39,40,41,42,43,44,45,46,47,64,106,111,112,126,127,128,129,158,164,167,177,190,191,],[-7,56,56,-41,-42,-43,-44,-45,-46,-47,-48,-98,-40,-49,-57,-90,-91,-92,-93,-94,56,56,56,56,-50,-51,]),'DO_END':([24,39,40,41,42,43,44,45,46,47,64,106,111,112,126,127,128,129,158,164,167,177,190,191,],[-7,-41,-42,-43,-44,-45,-46,-47,-48,-98,-40,-49,-57,-90,-91,-92,-93,-94,-96,-96,180,189,-50,-51,]),'ID':([26,27,51,138,],[29,31,31,29,]),'MAIN':([27,51,],[32,32,]),'RBRACKET':([28,29,30,31,32,61,62,91,92,93,94,95,96,97,159,171,210,212,],[33,-36,35,-38,-39,104,105,-73,-74,-75,-76,-77,-78,-79,169,183,219,221,]),'CONST':([28,29,],[34,-36,]),'VAR_END':([29,130,159,170,172,209,211,213,215,234,236,245,246,],[-36,151,168,182,184,218,220,222,223,239,240,247,248,]),'CALL_END':([31,32,72,],[-38,-39,111,]),'TYPE_START':([33,104,105,],[36,133,134,]),'INT':([36,133,134,],[58,58,58,]),'CELL':([36,133,134,],[59,59,59,]),'BOOL':([36,133,134,],[60,60,60,]),'FALSE':([37,52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[61,93,93,93,93,93,93,-68,-69,-70,-71,-62,93,93,93,93,93,93,93,93,93,93,93,-73,-74,-75,-76,-77,-78,-79,93,93,-67,93,93,93,93,93,93,93,93,93,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,93,-60,93,93,93,93,93,93,-61,93,]),'TRUE':([37,52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[62,92,92,92,92,92,92,-68,-69,-70,-71,-62,92,92,92,92,92,92,92,92,92,92,92,-73,-74,-75,-76,-77,-78,-79,92,92,-67,92,92,92,92,92,92,92,92,92,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,92,-60,92,92,92,92,92,92,-61,92,]),'CONDITION_START':([48,65,66,68,69,107,202,],[67,67,-53,-55,-56,-52,-54,]),'SWITCH_END':([48,65,66,68,69,107,202,],[-96,106,-53,-55,-56,-52,-54,]),'VALUE_START':([49,103,162,163,216,224,225,230,235,237,238,241,242,],[70,131,173,175,226,226,-28,-27,-29,226,226,226,226,]),'CHECK_START':([50,67,],[71,108,]),'SENDDRONS_START':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[80,80,80,80,80,80,-68,-69,-70,-71,-62,80,80,80,80,80,80,80,80,80,80,80,-73,-74,-75,-76,-77,-78,-79,80,80,-67,80,80,80,80,80,80,80,80,80,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,80,80,80,80,-61,80,]),'ADD_START':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[81,81,81,81,81,81,-68,-69,-70,-71,-62,81,81,81,81,81,81,81,81,81,81,81,-73,-74,-75,-76,-77,-78,-79,81,81,-67,81,81,81,81,81,81,81,81,81,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,81,81,81,81,-61,81,]),'MUL_START':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[82,82,82,82,82,82,-68,-69,-70,-71,-62,82,82,82,82,82,82,82,82,82,82,82,-73,-74,-75,-76,-77,-78,-79,82,82,-67,82,82,82,82,82,82,82,82,82,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,82,82,82,82,-61,82,]),'SUB_START':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[83,83,83,83,83,83,-68,-69,-70,-71,-62,83,83,83,83,83,83,83,83,83,83,83,-73,-74,-75,-76,-77,-78,-79,83,83,-67,83,83,83,83,83,83,83,83,83,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,83,83,83,83,-61,83,]),'DIV_START':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[84,84,84,84,84,84,-68,-69,-70,-71,-62,84,84,84,84,84,84,84,84,84,84,84,-73,-74,-75,-76,-77,-78,-79,84,84,-67,84,84,84,84,84,84,84,84,84,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,84,84,84,84,-61,84,]),'OR_START':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[85,85,85,85,85,85,-68,-69,-70,-71,-62,85,85,85,85,85,85,85,85,85,85,85,-73,-74,-75,-76,-77,-78,-79,85,85,-67,85,85,85,85,85,85,85,85,85,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,85,85,85,85,-61,85,]),'AND_START':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[86,86,86,86,86,86,-68,-69,-70,-71,-62,86,86,86,86,86,86,86,86,86,86,86,-73,-74,-75,-76,-77,-78,-79,86,86,-67,86,86,86,86,86,86,86,86,86,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,86,86,86,86,-61,86,]),'MAX_START':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[87,87,87,87,87,87,-68,-69,-70,-71,-62,87,87,87,87,87,87,87,87,87,87,87,-73,-74,-75,-76,-77,-78,-79,87,87,-67,87,87,87,87,87,87,87,87,87,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,87,87,87,87,-61,87,]),'MIN_START':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[88,88,88,88,88,88,-68,-69,-70,-71,-62,88,88,88,88,88,88,88,88,88,88,88,-73,-74,-75,-76,-77,-78,-79,88,88,-67,88,88,88,88,88,88,88,88,88,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,88,88,88,88,-61,88,]),'EQ_START':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[89,89,89,89,89,89,-68,-69,-70,-71,-62,89,89,89,89,89,89,89,89,89,89,89,-73,-74,-75,-76,-77,-78,-79,89,89,-67,89,89,89,89,89,89,89,89,89,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,89,89,89,89,-61,89,]),'NOT_START':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,168,173,175,194,197,222,226,],[90,90,90,90,90,90,-68,-69,-70,-71,-62,90,90,90,90,90,90,90,90,90,90,90,-73,-74,-75,-76,-77,-78,-79,90,90,-67,90,90,90,90,90,90,90,90,90,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,90,90,90,90,-61,90,]),'NUMBER':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[91,91,91,91,91,91,-68,-69,-70,-71,-62,91,91,91,91,91,91,91,91,91,91,91,-73,-74,-75,-76,-77,-78,-79,91,91,-67,91,91,91,91,91,91,91,91,91,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,91,-60,91,91,91,91,91,91,-61,91,]),'EMPTY':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[94,94,94,94,94,94,-68,-69,-70,-71,-62,94,94,94,94,94,94,94,94,94,94,94,-73,-74,-75,-76,-77,-78,-79,94,94,-67,94,94,94,94,94,94,94,94,94,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,94,-60,94,94,94,94,94,94,-61,94,]),'WALL':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[95,95,95,95,95,95,-68,-69,-70,-71,-62,95,95,95,95,95,95,95,95,95,95,95,-73,-74,-75,-76,-77,-78,-79,95,95,-67,95,95,95,95,95,95,95,95,95,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,95,-60,95,95,95,95,95,95,-61,95,]),'EXIT':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[96,96,96,96,96,96,-68,-69,-70,-71,-62,96,96,96,96,96,96,96,96,96,96,96,-73,-74,-75,-76,-77,-78,-79,96,96,-67,96,96,96,96,96,96,96,96,96,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,96,-60,96,96,96,96,96,96,-61,96,]),'UNDEF':([52,53,54,55,70,71,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,108,115,116,117,118,119,120,121,122,123,124,131,139,140,141,142,143,144,145,146,147,148,149,150,161,168,173,175,194,197,199,201,222,226,],[97,97,97,97,97,97,-68,-69,-70,-71,-62,97,97,97,97,97,97,97,97,97,97,97,-73,-74,-75,-76,-77,-78,-79,97,97,-67,97,97,97,97,97,97,97,97,97,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,97,-60,97,97,97,97,97,97,-61,97,]),'LEFT_END':([52,73,74,75,76,77,78,91,92,93,94,95,96,97,139,140,142,143,144,145,146,147,148,149,150,168,222,],[-96,112,-68,-69,-70,-71,-62,-73,-74,-75,-76,-77,-78,-79,-95,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'RIGHT_END':([53,74,75,76,77,78,91,92,93,94,95,96,97,98,139,140,142,143,144,145,146,147,148,149,150,168,222,],[-96,-68,-69,-70,-71,-62,-73,-74,-75,-76,-77,-78,-79,126,-95,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'UP_END':([54,74,75,76,77,78,91,92,93,94,95,96,97,99,139,140,142,143,144,145,146,147,148,149,150,168,222,],[-96,-68,-69,-70,-71,-62,-73,-74,-75,-76,-77,-78,-79,127,-95,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'DOWN_END':([55,74,75,76,77,78,91,92,93,94,95,96,97,100,139,140,142,143,144,145,146,147,148,149,150,168,222,],[-96,-68,-69,-70,-71,-62,-73,-74,-75,-76,-77,-78,-79,128,-95,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'GETDRONSCOUNT_END':([56,101,102,168,222,],[-96,129,-62,-60,-61,]),'TYPE_END':([57,58,59,60,154,155,],[103,-33,-34,-35,162,163,]),'VALUE_END':([70,74,75,76,77,78,91,92,93,94,95,96,97,109,131,139,140,142,143,144,145,146,147,148,149,150,152,168,173,175,185,187,222,226,231,],[-96,-68,-69,-70,-71,-62,-73,-74,-75,-76,-77,-78,-79,136,-96,-95,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,160,-60,-96,-96,198,200,-61,-96,235,]),'CHECK_END':([71,74,75,76,77,78,91,92,93,94,95,96,97,108,110,135,139,140,142,143,144,145,146,147,148,149,150,168,222,],[-96,-68,-69,-70,-71,-62,-73,-74,-75,-76,-77,-78,-79,-96,137,156,-95,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'SENDDRONS_END':([74,75,76,77,78,80,91,92,93,94,95,96,97,114,139,140,142,143,144,145,146,147,148,149,150,168,222,],[-68,-69,-70,-71,-62,-96,-73,-74,-75,-76,-77,-78,-79,139,-95,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'ADD_END':([74,75,76,77,78,81,91,92,93,94,95,96,97,115,116,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-68,-69,-70,-71,-62,-96,-73,-74,-75,-76,-77,-78,-79,140,-67,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'MUL_END':([74,75,76,77,78,82,91,92,93,94,95,96,97,116,117,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-68,-69,-70,-71,-62,-96,-73,-74,-75,-76,-77,-78,-79,-67,142,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'SUB_END':([74,75,76,77,78,83,91,92,93,94,95,96,97,116,118,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-68,-69,-70,-71,-62,-96,-73,-74,-75,-76,-77,-78,-79,-67,143,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'DIV_END':([74,75,76,77,78,84,91,92,93,94,95,96,97,116,119,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-68,-69,-70,-71,-62,-96,-73,-74,-75,-76,-77,-78,-79,-67,144,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'OR_END':([74,75,76,77,78,85,91,92,93,94,95,96,97,116,120,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-68,-69,-70,-71,-62,-96,-73,-74,-75,-76,-77,-78,-79,-67,145,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'AND_END':([74,75,76,77,78,86,91,92,93,94,95,96,97,116,121,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-68,-69,-70,-71,-62,-96,-73,-74,-75,-76,-77,-78,-79,-67,146,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'MAX_END':([74,75,76,77,78,87,91,92,93,94,95,96,97,116,122,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-68,-69,-70,-71,-62,-96,-73,-74,-75,-76,-77,-78,-79,-67,147,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'MIN_END':([74,75,76,77,78,88,91,92,93,94,95,96,97,116,123,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-68,-69,-70,-71,-62,-96,-73,-74,-75,-76,-77,-78,-79,-67,148,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'EQ_END':([74,75,76,77,78,89,91,92,93,94,95,96,97,116,124,139,140,141,142,143,144,145,146,147,148,149,150,168,222,],[-68,-69,-70,-71,-62,-96,-73,-74,-75,-76,-77,-78,-79,-67,149,-95,-80,-66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'NOT_END':([74,75,76,77,78,90,91,92,93,94,95,96,97,125,139,140,142,143,144,145,146,147,148,149,150,168,222,],[-68,-69,-70,-71,-62,-96,-73,-74,-75,-76,-77,-78,-79,150,-95,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-61,]),'INDEX_END':([74,75,76,77,78,91,92,93,94,95,96,97,139,140,142,143,144,145,146,147,148,149,150,168,194,205,222,],[-68,-69,-70,-71,-62,-73,-74,-75,-76,-77,-78,-79,-95,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-96,214,-61,]),'DIMENSION_END':([74,75,76,77,78,91,92,93,94,95,96,97,139,140,142,143,144,145,146,147,148,149,150,168,197,208,222,],[-68,-69,-70,-71,-62,-73,-74,-75,-76,-77,-78,-79,-95,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-60,-96,217,-61,]),'TO_END':([102,157,165,166,168,179,222,],[-62,-96,178,-59,-60,-58,-61,]),'LBRACKET':([103,160,162,198,200,203,206,229,232,243,244,],[130,170,172,209,211,213,215,234,236,245,246,]),'DIMENSIONS_START':([103,162,163,],[132,174,176,]),'COUNT':([132,174,176,],[153,186,188,]),'TO_START':([136,],[157,]),'DO_START':([137,156,],[158,164,]),'DIM_START':([169,],[181,]),'ASSIGN_END':([178,],[190,]),'WHILE_END':([180,],[191,]),'INDEX_START':([181,192,193,204,214,],[194,194,-64,-63,-65,]),'DIMENSION_START':([183,195,196,207,217,219,221,227,228,],[197,197,-31,-30,-32,197,197,197,197,]),'CONDITION_END':([189,],[202,]),'DIM_END':([192,193,204,214,],[203,-64,-63,-65,]),'DIMENSIONS_END':([195,196,207,217,227,228,],[206,-31,-30,-32,232,233,]),'VALUES_START':([206,232,233,],[216,237,238,]),'VALUES_END':([224,225,230,235,241,242,],[229,-28,-27,-29,243,244,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'blocks':([2,],[3,]),'block':([2,3,],[4,12,]),'vardeclaration':([2,3,35,38,158,164,167,177,],[5,5,40,40,40,40,40,40,]),'function':([2,3,],[6,6,]),'empty':([2,3,9,13,35,38,48,52,53,54,55,56,65,70,71,80,81,82,83,84,85,86,87,88,89,90,108,115,117,118,119,120,121,122,123,124,131,157,158,164,165,167,173,175,177,194,197,226,],[7,7,21,21,46,46,68,78,78,78,78,102,68,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,102,46,46,102,46,78,78,46,78,78,78,]),'declarations':([9,],[13,]),'declaration':([9,13,],[14,25,]),'declaration_var':([9,13,],[15,15,]),'declaration_var_init':([9,13,],[16,16,]),'declaration_var_const':([9,13,],[17,17,]),'declaration_array':([9,13,],[18,18,]),'declaration_array_init':([9,13,],[19,19,]),'declaration_array_const':([9,13,],[20,20,]),'id':([26,138,],[28,159,]),'funcname':([27,51,],[30,72,]),'statements':([35,158,164,],[38,167,177,]),'statement':([35,38,158,164,167,177,],[39,64,39,39,64,64,]),'switch':([35,38,158,164,167,177,],[41,41,41,41,41,41,]),'assignment':([35,38,158,164,167,177,],[42,42,42,42,42,42,]),'while':([35,38,158,164,167,177,],[43,43,43,43,43,43,]),'call':([35,38,158,164,167,177,],[44,44,44,44,44,44,]),'operator':([35,38,158,164,167,177,],[45,45,45,45,45,45,]),'type':([36,133,134,],[57,154,155,]),'conditions':([48,],[65,]),'condition':([48,65,],[66,107,]),'expression':([52,53,54,55,70,71,80,81,82,83,84,85,86,87,88,89,90,108,115,117,118,119,120,121,122,123,124,131,173,175,194,197,226,],[73,98,99,100,109,110,114,116,116,116,116,116,116,116,116,116,125,135,141,141,141,141,141,141,141,141,141,152,185,187,205,208,231,]),'variable':([52,53,54,55,56,70,71,80,81,82,83,84,85,86,87,88,89,90,108,115,117,118,119,120,121,122,123,124,131,157,165,173,175,194,197,226,],[74,74,74,74,101,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,166,179,74,74,74,74,74,]),'senddrons':([52,53,54,55,70,71,80,81,82,83,84,85,86,87,88,89,90,108,115,117,118,119,120,121,122,123,124,131,173,175,194,197,226,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'standart_function':([52,53,54,55,70,71,80,81,82,83,84,85,86,87,88,89,90,108,115,117,118,119,120,121,122,123,124,131,173,175,194,197,226,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'const':([52,53,54,55,70,71,80,81,82,83,84,85,86,87,88,89,90,108,115,117,118,119,120,121,122,123,124,131,161,173,175,194,197,199,201,226,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,171,77,77,77,77,210,212,77,]),'expressions':([81,82,83,84,85,86,87,88,89,],[115,117,118,119,120,121,122,123,124,]),'variables':([157,],[165,]),'indexes':([181,],[192,]),'index':([181,192,],[193,204,]),'dimensions':([183,219,221,],[195,227,228,]),'dimension':([183,195,219,221,227,228,],[196,207,196,196,207,207,]),'values':([216,237,238,],[224,241,242,]),'value':([216,224,237,238,241,242,],[225,230,225,225,230,230,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_START blocks PROGRAM_END','program',3,'p_program','parser.py',55),
  ('blocks -> blocks block','blocks',2,'p_blocks','parser.py',59),
  ('blocks -> block','blocks',1,'p_blocks','parser.py',60),
  ('block -> vardeclaration','block',1,'p_block','parser.py',67),
  ('block -> function','block',1,'p_block','parser.py',68),
  ('block -> empty','block',1,'p_block','parser.py',69),
  ('vardeclaration -> VARDECLARATION_START declarations VARDECLARATION_END','vardeclaration',3,'p_vardeclaration','parser.py',73),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',77),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',78),
  ('declaration -> declaration_var','declaration',1,'p_declaration','parser.py',85),
  ('declaration -> declaration_var_init','declaration',1,'p_declaration','parser.py',86),
  ('declaration -> declaration_var_const','declaration',1,'p_declaration','parser.py',87),
  ('declaration -> declaration_array','declaration',1,'p_declaration','parser.py',88),
  ('declaration -> declaration_array_init','declaration',1,'p_declaration','parser.py',89),
  ('declaration -> declaration_array_const','declaration',1,'p_declaration','parser.py',90),
  ('declaration -> empty','declaration',1,'p_declaration','parser.py',91),
  ('declaration_var -> VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END LBRACKET VAR_END','declaration_var',9,'p_declaration_var','parser.py',95),
  ('declaration_var -> VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END LBRACKET VAR_END','declaration_var',12,'p_declaration_var','parser.py',96),
  ('declaration_var_const -> VAR_START EQUALSIGN id CONST EQUALSIGN TRUE RBRACKET TYPE_START type TYPE_END VALUE_START expression VALUE_END LBRACKET VAR_END','declaration_var_const',15,'p_declaration_var_const','parser.py',100),
  ('declaration_var_init -> VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END VALUE_START expression VALUE_END LBRACKET VAR_END','declaration_var_init',12,'p_declaration_var_init','parser.py',104),
  ('declaration_var_init -> VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END VALUE_START expression VALUE_END LBRACKET VAR_END','declaration_var_init',15,'p_declaration_var_init','parser.py',105),
  ('declaration_array -> VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END LBRACKET VAR_END','declaration_array',16,'p_declaration_array','parser.py',109),
  ('declaration_array -> VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END LBRACKET VAR_END','declaration_array',19,'p_declaration_array','parser.py',110),
  ('declaration_array_init -> VAR_START EQUALSIGN id RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END VALUES_START values VALUES_END LBRACKET VAR_END','declaration_array_init',19,'p_declaration_array_init','parser.py',114),
  ('declaration_array_init -> VAR_START EQUALSIGN id CONST EQUALSIGN FALSE RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END VALUES_START values VALUES_END LBRACKET VAR_END','declaration_array_init',22,'p_declaration_array_init','parser.py',115),
  ('declaration_array_const -> VAR_START EQUALSIGN id CONST EQUALSIGN TRUE RBRACKET TYPE_START type TYPE_END DIMENSIONS_START COUNT EQUALSIGN const RBRACKET dimensions DIMENSIONS_END VALUES_START values VALUES_END LBRACKET VAR_END','declaration_array_const',22,'p_declaration_array_const','parser.py',119),
  ('values -> values value','values',2,'p_values','parser.py',123),
  ('values -> value','values',1,'p_values','parser.py',124),
  ('value -> VALUE_START expression VALUE_END','value',3,'p_value','parser.py',131),
  ('dimensions -> dimensions dimension','dimensions',2,'p_dimensions','parser.py',135),
  ('dimensions -> dimension','dimensions',1,'p_dimensions','parser.py',136),
  ('dimension -> DIMENSION_START expression DIMENSION_END','dimension',3,'p_dimension','parser.py',143),
  ('type -> INT','type',1,'p_type','parser.py',147),
  ('type -> CELL','type',1,'p_type','parser.py',148),
  ('type -> BOOL','type',1,'p_type','parser.py',149),
  ('id -> ID','id',1,'p_id','parser.py',153),
  ('function -> FUNC_START NAME EQUALSIGN funcname RBRACKET statements FUNC_END','function',7,'p_function','parser.py',157),
  ('funcname -> ID','funcname',1,'p_funcname','parser.py',161),
  ('funcname -> MAIN','funcname',1,'p_funcname','parser.py',162),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',166),
  ('statements -> statement','statements',1,'p_statements','parser.py',167),
  ('statement -> vardeclaration','statement',1,'p_statement','parser.py',174),
  ('statement -> switch','statement',1,'p_statement','parser.py',175),
  ('statement -> assignment','statement',1,'p_statement','parser.py',176),
  ('statement -> while','statement',1,'p_statement','parser.py',177),
  ('statement -> call','statement',1,'p_statement','parser.py',178),
  ('statement -> operator','statement',1,'p_statement','parser.py',179),
  ('statement -> empty','statement',1,'p_statement','parser.py',180),
  ('switch -> SWITCH_START conditions SWITCH_END','switch',3,'p_switch','parser.py',184),
  ('assignment -> ASSIGN_START VALUE_START expression VALUE_END TO_START variables TO_END ASSIGN_END','assignment',8,'p_assignment','parser.py',188),
  ('while -> WHILE_START CHECK_START expression CHECK_END DO_START statements DO_END WHILE_END','while',8,'p_while','parser.py',192),
  ('conditions -> conditions condition','conditions',2,'p_conditions','parser.py',196),
  ('conditions -> condition','conditions',1,'p_conditions','parser.py',197),
  ('condition -> CONDITION_START CHECK_START expression CHECK_END DO_START statements DO_END CONDITION_END','condition',8,'p_condition','parser.py',204),
  ('condition -> empty','condition',1,'p_condition','parser.py',205),
  ('condition -> error','condition',1,'p_condition_error','parser.py',212),
  ('call -> CALL_START funcname CALL_END','call',3,'p_call','parser.py',220),
  ('variables -> variables variable','variables',2,'p_variables','parser.py',225),
  ('variables -> variable','variables',1,'p_variables','parser.py',226),
  ('variable -> VAR_START NAME EQUALSIGN id VAR_END','variable',5,'p_variable','parser.py',233),
  ('variable -> VAR_START NAME EQUALSIGN id RBRACKET DIM_START indexes DIM_END LBRACKET VAR_END','variable',10,'p_variable','parser.py',234),
  ('variable -> empty','variable',1,'p_variable','parser.py',235),
  ('indexes -> indexes index','indexes',2,'p_indexes','parser.py',244),
  ('indexes -> index','indexes',1,'p_indexes','parser.py',245),
  ('index -> INDEX_START expression INDEX_END','index',3,'p_index','parser.py',252),
  ('expressions -> expressions expression','expressions',2,'p_expressions','parser.py',256),
  ('expressions -> expression','expressions',1,'p_expressions','parser.py',257),
  ('expression -> variable','expression',1,'p_expression','parser.py',264),
  ('expression -> senddrons','expression',1,'p_expression','parser.py',265),
  ('expression -> standart_function','expression',1,'p_expression','parser.py',266),
  ('expression -> const','expression',1,'p_expression','parser.py',267),
  ('expression -> empty','expression',1,'p_expression','parser.py',268),
  ('const -> NUMBER','const',1,'p_const','parser.py',272),
  ('const -> TRUE','const',1,'p_const','parser.py',273),
  ('const -> FALSE','const',1,'p_const','parser.py',274),
  ('const -> EMPTY','const',1,'p_const','parser.py',275),
  ('const -> WALL','const',1,'p_const','parser.py',276),
  ('const -> EXIT','const',1,'p_const','parser.py',277),
  ('const -> UNDEF','const',1,'p_const','parser.py',278),
  ('standart_function -> ADD_START expressions ADD_END','standart_function',3,'p_standart_function','parser.py',282),
  ('standart_function -> MUL_START expressions MUL_END','standart_function',3,'p_standart_function','parser.py',283),
  ('standart_function -> SUB_START expressions SUB_END','standart_function',3,'p_standart_function','parser.py',284),
  ('standart_function -> DIV_START expressions DIV_END','standart_function',3,'p_standart_function','parser.py',285),
  ('standart_function -> OR_START expressions OR_END','standart_function',3,'p_standart_function','parser.py',286),
  ('standart_function -> AND_START expressions AND_END','standart_function',3,'p_standart_function','parser.py',287),
  ('standart_function -> MAX_START expressions MAX_END','standart_function',3,'p_standart_function','parser.py',288),
  ('standart_function -> MIN_START expressions MIN_END','standart_function',3,'p_standart_function','parser.py',289),
  ('standart_function -> EQ_START expressions EQ_END','standart_function',3,'p_standart_function','parser.py',290),
  ('standart_function -> NOT_START expression NOT_END','standart_function',3,'p_standart_function','parser.py',291),
  ('operator -> LEFT_START expression LEFT_END','operator',3,'p_operator','parser.py',295),
  ('operator -> RIGHT_START expression RIGHT_END','operator',3,'p_operator','parser.py',296),
  ('operator -> UP_START expression UP_END','operator',3,'p_operator','parser.py',297),
  ('operator -> DOWN_START expression DOWN_END','operator',3,'p_operator','parser.py',298),
  ('operator -> GETDRONSCOUNT_START variable GETDRONSCOUNT_END','operator',3,'p_operator','parser.py',299),
  ('senddrons -> SENDDRONS_START expression SENDDRONS_END','senddrons',3,'p_senddrons','parser.py',303),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',307),
  ('block -> error','block',1,'p_block_error','parser.py',315),
  ('statement -> error','statement',1,'p_statement_error','parser.py',323),
]
